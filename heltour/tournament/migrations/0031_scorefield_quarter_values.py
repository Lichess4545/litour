# Generated by Django 4.2.22 on 2025-10-11 01:31

from django.db import migrations
from django.db.models import F


def convert_scores_to_quarter_values(apps, schema_editor):
    """Convert existing scores from half-point to quarter-point storage."""

    # PlayerLateRegistration
    PlayerLateRegistration = apps.get_model("tournament", "PlayerLateRegistration")
    PlayerLateRegistration.objects.update(late_join_points=F("late_join_points") * 2)

    # TeamScore
    TeamScore = apps.get_model("tournament", "TeamScore")
    TeamScore.objects.update(
        game_points=F("game_points") * 2,
        sb_score=F("sb_score") * 2,
        buchholz=F("buchholz") * 2,
    )

    # TeamPairing
    TeamPairing = apps.get_model("tournament", "TeamPairing")
    TeamPairing.objects.update(
        white_points=F("white_points") * 2, black_points=F("black_points") * 2
    )

    # LonePlayerScore
    LonePlayerScore = apps.get_model("tournament", "LonePlayerScore")
    LonePlayerScore.objects.update(
        points=F("points") * 2,
        late_join_points=F("late_join_points") * 2,
        tiebreak1=F("tiebreak1") * 2,
        tiebreak2=F("tiebreak2") * 2,
        tiebreak3=F("tiebreak3") * 2,
        tiebreak4=F("tiebreak4") * 2,
    )


def revert_scores_from_quarter_values(apps, schema_editor):
    """Revert scores from quarter-point to half-point storage."""

    # PlayerLateRegistration
    PlayerLateRegistration = apps.get_model("tournament", "PlayerLateRegistration")
    PlayerLateRegistration.objects.update(late_join_points=F("late_join_points") / 2)

    # TeamScore
    TeamScore = apps.get_model("tournament", "TeamScore")
    TeamScore.objects.update(
        game_points=F("game_points") / 2,
        sb_score=F("sb_score") / 2,
        buchholz=F("buchholz") / 2,
    )

    # TeamPairing
    TeamPairing = apps.get_model("tournament", "TeamPairing")
    TeamPairing.objects.update(
        white_points=F("white_points") / 2, black_points=F("black_points") / 2
    )

    # LonePlayerScore
    LonePlayerScore = apps.get_model("tournament", "LonePlayerScore")
    LonePlayerScore.objects.update(
        points=F("points") / 2,
        late_join_points=F("late_join_points") / 2,
        tiebreak1=F("tiebreak1") / 2,
        tiebreak2=F("tiebreak2") / 2,
        tiebreak3=F("tiebreak3") / 2,
        tiebreak4=F("tiebreak4") / 2,
    )


class Migration(migrations.Migration):

    dependencies = [
        ("tournament", "0030_alter_league_team_tiebreak_1_and_more"),
    ]

    operations = [
        migrations.RunPython(
            convert_scores_to_quarter_values, revert_scores_from_quarter_values
        ),
    ]

# Generated by Django 4.2.22 on 2025-10-13 23:43

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('tournament', '0033_merge_20251011_1403'),
    ]

    operations = [
        migrations.CreateModel(
            name='KnockoutBracket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('bracket_size', models.PositiveIntegerField(help_text='Total number of teams in knockout bracket (must be power of 2)')),
                ('seeding_style', models.CharField(choices=[('traditional', 'Traditional (1 vs 32, 2 vs 31, etc.)'), ('adjacent', 'Adjacent (1 vs 2, 3 vs 4, etc.)')], default='traditional', max_length=16)),
                ('games_per_match', models.PositiveIntegerField(default=1, help_text='Number of games each team pair plays before elimination')),
                ('is_completed', models.BooleanField(default=False)),
                ('season', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.season')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='league',
            name='knockout_games_per_match',
            field=models.PositiveIntegerField(default=1, help_text='Number of games per knockout match (1 for single, 2+ for multi-game)'),
        ),
        migrations.AddField(
            model_name='league',
            name='knockout_seeding_style',
            field=models.CharField(choices=[('traditional', 'Traditional (1 vs 32, 2 vs 31, etc.)'), ('adjacent', 'Adjacent (1 vs 2, 3 vs 4, etc.)')], default='traditional', help_text='Knockout bracket seeding pattern', max_length=16),
        ),
        migrations.AddField(
            model_name='round',
            name='is_knockout_multi_round',
            field=models.BooleanField(default=False, help_text='True if this round is part of a multi-game knockout match'),
        ),
        migrations.AddField(
            model_name='round',
            name='knockout_multi_round_group',
            field=models.CharField(blank=True, help_text='Identifier grouping multiple rounds that form one knockout match', max_length=64, null=True),
        ),
        migrations.AddField(
            model_name='round',
            name='knockout_stage',
            field=models.CharField(blank=True, choices=[('round-of-128', 'Round of 128'), ('round-of-64', 'Round of 64'), ('round-of-32', 'Round of 32'), ('round-of-16', 'Round of 16'), ('quarterfinals', 'Quarter-finals'), ('semifinals', 'Semi-finals'), ('finals', 'Finals')], help_text='Knockout tournament stage name', max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='teampairing',
            name='advances_winner_to_round',
            field=models.ForeignKey(blank=True, help_text='Round that the winner of this pairing advances to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='advancement_sources', to='tournament.round'),
        ),
        migrations.AddField(
            model_name='teampairing',
            name='manual_tiebreak_value',
            field=models.FloatField(blank=True, help_text='Manual tiebreak value set by arbiter (+ve = white wins, -ve = black wins)', null=True),
        ),
        migrations.AlterField(
            model_name='league',
            name='pairing_type',
            field=models.CharField(choices=[('swiss-dutch', 'Swiss Tournament: Dutch Algorithm'), ('swiss-dutch-baku-accel', 'Swiss Tournament: Dutch Algorithm + Baku Acceleration'), ('knockout-single', 'Knockout Tournament: Single Match'), ('knockout-multi', 'Knockout Tournament: Multi-Match')], max_length=32),
        ),
        migrations.CreateModel(
            name='KnockoutSeeding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('seed_number', models.PositiveIntegerField(help_text='1-indexed seed position')),
                ('is_manual_seed', models.BooleanField(default=False, help_text='True if seeding was set manually vs automatically')),
                ('bracket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.knockoutbracket')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.team')),
            ],
            options={
                'ordering': ['seed_number'],
                'unique_together': {('bracket', 'seed_number'), ('bracket', 'team')},
            },
        ),
        migrations.CreateModel(
            name='KnockoutAdvancement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('from_stage', models.CharField(max_length=32)),
                ('to_stage', models.CharField(max_length=32)),
                ('advanced_date', models.DateTimeField(auto_now_add=True)),
                ('bracket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.knockoutbracket')),
                ('source_pairing', models.ForeignKey(help_text='The pairing that determined this advancement', on_delete=django.db.models.deletion.CASCADE, to='tournament.teampairing')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.team')),
            ],
            options={
                'unique_together': {('bracket', 'team', 'to_stage')},
            },
        ),
    ]
